name: VMA Build

on:
  push:
    paths:
      - VulkanMemoryAllocator/**

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  Build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows (clang64),              os: windows-latest, shell: 'msys2 {0}', msystem: mingw64, msys-env: mingw-w64-x86_64, artifact: 'VulkanMemoryAllocator-msys2-clang64' }
        - { name: Ubuntu 20.04,                   os: ubuntu-20.04,   shell: sh, artifact: 'VulkanMemoryAllocator-ubuntu20.04' }
        # - { name: MacOS (Framework),              os: macos-latest,   shell: sh, cmake-platform: '-DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"', cmake: '-DVulkanMemoryAllocator_FRAMEWORK=ON -DVulkanMemoryAllocator_CLANG_TIDY=OFF', skip_test_pkgconfig: true, artifact: 'VulkanMemoryAllocator-macos-framework', no-static: true }
        # - { name: MacOS (GNU prefix),             os: macos-latest,   shell: sh, cmake-platform: '-DCMAKE_OSX_ARCHITECTURES="x86_64"', cmake: '-DCLANG_TIDY_BINARY="$(brew --prefix llvm)/bin/clang-tidy"', artifact: 'VulkanMemoryAllocator-macos-gnu' }
        # - { name: iOS (GNU prefix),               os: macos-latest,   shell: sh, cmake-platform: '-DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"',  cross-build: true, skip_test_pkgconfig: true, artifact: 'VulkanMemoryAllocator-ios-gnu' }

    steps:
    - name: Set up MSYS2
      if: matrix.platform.shell == 'msys2 {0}'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.platform.msystem }}
        install: >-
          ${{ matrix.platform.msys-env }}-cc
          ${{ matrix.platform.msys-env }}-cmake
          ${{ matrix.platform.msys-env }}-ninja
          ${{ matrix.platform.msys-env }}-perl
          ${{ matrix.platform.msys-env }}-pkg-config
          ${{ matrix.platform.msys-env }}-clang-tools-extra

    - name: Set up msvc
      if: runner.os == 'Windows'
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64

    - name: Setup Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install build-essential git \
            pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
            libaudio-dev libjack-dev libsndio-dev libusb-1.0-0-dev libx11-dev libxext-dev \
            libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev \
            libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev libvulkan-dev

    - name: Setup extra Ubuntu 22.04 dependencies
      if: matrix.platform.os == 'ubuntu-22.04'
      run: |
        sudo apt-get install libpipewire-0.3-dev libdecor-0-dev
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Build Linux
      if: runner.os == 'Linux'
      working-directory: VulkanMemoryAllocator
      id: build_linux
      run: |
        ${{ matrix.platform.source_cmd }}
        gcc -Iinclude/ include/vk_mem_alloc.h src/VmaUsage.h src/VmaUsage.cpp ../libs/libvulkan.so -shared -o build/VMA.so -fPIC
    - name: Build Windows
      if: runner.os == 'Windows'
      working-directory: VulkanMemoryAllocator
      id: build_windows
      run: |
        ${{ matrix.platform.source_cmd }}
        mkdir build

        clang -v -target x86_64-pc-windows-msvc -O3 -fvisibility=default -Wno-nullability-completeness -DVMA_CALL_PRE=__declspec\(dllexport\) -DVMA_CALL_POST=__cdecl -I../Vulkan-Headers/include -Iinclude src/VmaUsage.cpp ../libs/vulkan-1.lib -shared -o build/VMA.dll
    - uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: ${{ matrix.platform.artifact }}
        path: VulkanMemoryAllocator/build*
