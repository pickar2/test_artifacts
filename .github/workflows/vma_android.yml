name: VMA Build (Android)

on:
  push:

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  android:
    name: ${{ matrix.platform.name }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        platform:
          # - { name: "Android.mk"  }
          - { name: "CMake", cmake: 1, android_abi: "arm64-v8a", android_platform: 23, arch: "aarch64", artifact: "VulkanMemoryAllocator-android-arm64", apk-artifact: "VulkanMemoryAllocator-android-apks-arm64" }
 #         - { name: "CMake (lean and mean)", cmake: 1, cppflags: "-DSDL_LEAN_AND_MEAN=1", android_abi: "arm64-v8a", android_platform: 23, arch: "aarch64", artifact: "SDL-lean-android-arm64", apk-artifact: "SDL-lean-android-apks-arm64" }

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: nttld/setup-ndk@v1
        id: setup_ndk
        with:
          link-to-sdk: true
          add-to-path: true
          ndk-version: r26d

      # - name: Build (Android.mk)
      #   if: ${{ contains(matrix.platform.name, 'Android.mk') }}
      #   run: |
      #     ./SDL/build-scripts/androidbuildlibs.sh
      - uses: actions/setup-java@v4
        if: ${{ contains(matrix.platform.name, 'CMake') }}
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup (CMake)
        if: ${{ contains(matrix.platform.name, 'CMake') }}
        run: |
          sudo apt-get update
          sudo apt-get install build-essential git \
              libvulkan-dev g++-multilib libc++abi-dev libstdc++-13-dev

      # - name: Prepare toolchain
      #   run: |
      #     ${{ steps.setup_ndk.outputs.ndk-path }}/build/tools/make_standalone_toolchain.py \
      #     --arch arm64 \
      #     --api 21 \
      #     --install-dir=/tmp/toolchain
      # - name: Configure (CMake)
      #   working-directory: SDL
      #   if: ${{ contains(matrix.platform.name, 'CMake') }}
      #   run: |
      #     cmake -S . -B build \
      #       -DCMAKE_C_FLAGS="${{ matrix.platform.cppflags }}" \
      #       -DCMAKE_CXX_FLAGS="${{ matrix.platform.cppflags }}" \
      #       -Wdeprecated -Wdev -Werror \
      #       -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup_ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake \
      #       -DANDROID_PLATFORM=${{ matrix.platform.android_platform }} \
      #       -DANDROID_ABI=${{ matrix.platform.android_abi }} \
      #       -DCMAKE_INSTALL_PREFIX=prefix \
      #       -DCMAKE_BUILD_TYPE=Release \
      #       -GNinja
      - name: Build (CMake)
        working-directory: VulkanMemoryAllocator
        if: ${{ contains(matrix.platform.name, 'CMake') }}
        run: |
          mkdir build
          ${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ -v -std=c++20 -static-libstdc++ -D__ANDROID__ -D__ANDROID_API__=34 -fno-exceptions -fno-rtti -stdlib=libstdc++ -target aarch64-linux-android -DVK_USE_PLATFORM_ANDROID_KHR -B${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/34 -B${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/ -DANDROID_PLATFORM=34 -DANDROID_ABI=arm64-v8a -L${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/lib/ -L${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/34 -L${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/lib/clang/17/lib/linux/aarch64 --sysroot=${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/c++/v1 ${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/34/libvulkan.so -Iinclude/ src/VmaUsage.cpp -o build/VMA.o -fPIC
          ${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ -v -std=c++20 -static-libstdc++ -D__ANDROID__ -D__ANDROID_API__=34 -fno-exceptions -fno-rtti -stdlib=libstdc++ -target aarch64-linux-android -DVK_USE_PLATFORM_ANDROID_KHR -B${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/34 -B${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/ -DANDROID_PLATFORM=34 -DANDROID_ABI=arm64-v8a -L${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/lib/ -L${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/34 -L${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/lib/clang/17/lib/linux/aarch64 --sysroot=${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/c++/v1 ${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/34/libvulkan.so -Iinclude/ build/VMA.o ../libs/libvulkan.so -o build/VMA.so -shared
      # - name: Build test apk's (CMake)
      #   working-directory: SDL
      #   if: ${{ contains(matrix.platform.name, 'CMake') }}
      #   run: |
      #     cmake --build build --config Release --parallel --verbose --target testautomation-apk testaudiocapture-apk testcontroller-apk testmultiaudio-apk testsprite-apk
      # - name: Install (CMake)
      #   working-directory: SDL
      #   if: ${{ contains(matrix.platform.name, 'CMake') }}
      #   run: |
      #     cmake --install build --config Release
      #     echo "SDL3_DIR=$(pwd)/prefix" >> $GITHUB_ENV
      #     ( cd prefix; find ) | LC_ALL=C sort -u
      # - name: Package (CPack)
      #   working-directory: SDL
      #   if: ${{ contains(matrix.platform.name, 'CMake') }}
      #   run: |
      #     cmake --build build/ --config Release --target package
      # - name: Verify CMake configuration files
      #   working-directory: SDL
      #   if: ${{ contains(matrix.platform.name, 'CMake') }}
      #   run: |
      #     cmake -S cmake/test -B cmake_config_build -G Ninja \
      #       -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup_ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake \
      #       -DANDROID_PLATFORM=${{ matrix.platform.android_platform }} \
      #       -DANDROID_ABI=${{ matrix.platform.android_abi }} \
      #       -DCMAKE_BUILD_TYPE=Release \
      #       -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR }}
      #     cmake --build cmake_config_build --verbose
      # - name: Verify sdl3.pc
      #   working-directory: SDL
      #   if: ${{ contains(matrix.platform.name, 'CMake') }}
      #   run: |
      #     export CC="${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang --target=${{ matrix.platform.arch }}-none-linux-androideabi${{ matrix.platform.android_platform }}"
      #     export PKG_CONFIG_PATH=${{ env.SDL3_DIR }}/lib/pkgconfig
      #     cmake/test/test_pkgconfig.sh
      - uses: actions/upload-artifact@v4
        if: ${{ contains(matrix.platform.name, 'CMake') }}
        with:
          if-no-files-found: error
          name: ${{ matrix.platform.artifact }}
          path: VulkanMemoryAllocator/build*
      # - uses: actions/upload-artifact@v4
      #   if: ${{ contains(matrix.platform.name, 'CMake') }}
      #   with:
      #     if-no-files-found: error
      #     name: ${{ matrix.platform.apk-artifact }}
      #     path: VulkanMemoryAllocator/build/test/*.apk
